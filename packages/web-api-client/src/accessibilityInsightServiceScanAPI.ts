/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from '@azure/ms-rest-js';

import { AccessibilityInsightServiceScanAPIContext } from './accessibilityInsightServiceScanAPIContext';
import * as Models from './models';
import * as Mappers from './models/mappers';
import * as Parameters from './models/parameters';

class AccessibilityInsightServiceScanAPI extends AccessibilityInsightServiceScanAPIContext {
    /**
     * Initializes a new instance of the AccessibilityInsightServiceScanAPI class.
     * @param [options] The parameter options
     */
    constructor(options?: Models.AccessibilityInsightServiceScanAPIOptions) {
        super(options);
    }

    /**
     * Create accessibility scan requests
     * @summary createScans
     * @param apiVersion The client API version
     * @param [options] The optional parameters
     * @returns Promise<Models.ScansPostResponse>
     */
    public scansPost(
        apiVersion: string,
        options?: Models.AccessibilityInsightServiceScanAPIScansPostOptionalParams,
    ): Promise<Models.ScansPostResponse>;

    /**
     * @param apiVersion The client API version
     * @param callback The callback
     */
    public scansPost(apiVersion: string, callback: msRest.ServiceCallback<Models.ScanRunResponse[]>): void;

    /**
     * @param apiVersion The client API version
     * @param options The optional parameters
     * @param callback The callback
     */
    public scansPost(
        apiVersion: string,
        options: Models.AccessibilityInsightServiceScanAPIScansPostOptionalParams,
        callback: msRest.ServiceCallback<Models.ScanRunResponse[]>,
    ): void;

    scansPost(
        apiVersion: string,
        options?: Models.AccessibilityInsightServiceScanAPIScansPostOptionalParams | msRest.ServiceCallback<Models.ScanRunResponse[]>,
        callback?: msRest.ServiceCallback<Models.ScanRunResponse[]>,
    ): Promise<Models.ScansPostResponse> {
        return this.sendOperationRequest(
            {
                apiVersion,
                options,
            },
            scansPostOperationSpec,
            callback,
        ) as Promise<Models.ScansPostResponse>;
    }

    /**
     * Get accessibility scan result
     * @summary getScan
     * @param scanid The scan request ID
     * @param apiVersion The client API version
     * @param [options] The optional parameters
     * @returns Promise<Models.ScansByScanidGetResponse>
     */
    public scansByScanidGet(
        scanid: string,
        apiVersion: string,
        options?: msRest.RequestOptionsBase,
    ): Promise<Models.ScansByScanidGetResponse>;

    /**
     * @param scanid The scan request ID
     * @param apiVersion The client API version
     * @param callback The callback
     */
    public scansByScanidGet(scanid: string, apiVersion: string, callback: msRest.ServiceCallback<any>): void;

    /**
     * @param scanid The scan request ID
     * @param apiVersion The client API version
     * @param options The optional parameters
     * @param callback The callback
     */
    public scansByScanidGet(
        scanid: string,
        apiVersion: string,
        options: msRest.RequestOptionsBase,
        callback: msRest.ServiceCallback<any>,
    ): void;

    scansByScanidGet(
        scanid: string,
        apiVersion: string,
        options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>,
        callback?: msRest.ServiceCallback<any>,
    ): Promise<Models.ScansByScanidGetResponse> {
        return this.sendOperationRequest(
            {
                scanid,
                apiVersion,
                options,
            },
            scansByScanidGetOperationSpec,
            callback,
        ) as Promise<Models.ScansByScanidGetResponse>;
    }

    /**
     * Get accessibility scan results
     * @summary getScanBatch
     * @param apiVersion The client API version
     * @param [options] The optional parameters
     * @returns Promise<Models.ScansBatchPostResponse>
     */
    public scansBatchPost(
        apiVersion: string,
        options?: Models.AccessibilityInsightServiceScanAPIScansBatchPostOptionalParams,
    ): Promise<Models.ScansBatchPostResponse>;

    /**
     * @param apiVersion The client API version
     * @param callback The callback
     */
    public scansBatchPost(apiVersion: string, callback: msRest.ServiceCallback<any>): void;

    /**
     * @param apiVersion The client API version
     * @param options The optional parameters
     * @param callback The callback
     */
    public scansBatchPost(
        apiVersion: string,
        options: Models.AccessibilityInsightServiceScanAPIScansBatchPostOptionalParams,
        callback: msRest.ServiceCallback<any>,
    ): void;

    scansBatchPost(
        apiVersion: string,
        options?: Models.AccessibilityInsightServiceScanAPIScansBatchPostOptionalParams | msRest.ServiceCallback<any>,
        callback?: msRest.ServiceCallback<any>,
    ): Promise<Models.ScansBatchPostResponse> {
        return this.sendOperationRequest(
            {
                apiVersion,
                options,
            },
            scansBatchPostOperationSpec,
            callback,
        ) as Promise<Models.ScansBatchPostResponse>;
    }

    /**
     * Get accessibility scan report
     * @summary getReport
     * @param scanid The scan request ID
     * @param reportid The report ID
     * @param apiVersion The client API version
     * @param [options] The optional parameters
     * @returns Promise<Models.ScansReportsByScanidAndReportidGetResponse>
     */
    public scansReportsByScanidAndReportidGet(
        scanid: string,
        reportid: string,
        apiVersion: string,
        options?: msRest.RequestOptionsBase,
    ): Promise<Models.ScansReportsByScanidAndReportidGetResponse>;

    /**
     * @param scanid The scan request ID
     * @param reportid The report ID
     * @param apiVersion The client API version
     * @param callback The callback
     */
    public scansReportsByScanidAndReportidGet(
        scanid: string,
        reportid: string,
        apiVersion: string,
        callback: msRest.ServiceCallback<Models.ScansReportsResponse>,
    ): void;

    /**
     * @param scanid The scan request ID
     * @param reportid The report ID
     * @param apiVersion The client API version
     * @param options The optional parameters
     * @param callback The callback
     */
    public scansReportsByScanidAndReportidGet(
        scanid: string,
        reportid: string,
        apiVersion: string,
        options: msRest.RequestOptionsBase,
        callback: msRest.ServiceCallback<Models.ScansReportsResponse>,
    ): void;

    scansReportsByScanidAndReportidGet(
        scanid: string,
        reportid: string,
        apiVersion: string,
        options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ScansReportsResponse>,
        callback?: msRest.ServiceCallback<Models.ScansReportsResponse>,
    ): Promise<Models.ScansReportsByScanidAndReportidGetResponse> {
        return this.sendOperationRequest(
            {
                scanid,
                reportid,
                apiVersion,
                options,
            },
            scansReportsByScanidAndReportidGetOperationSpec,
            callback,
        ) as Promise<Models.ScansReportsByScanidAndReportidGetResponse>;
    }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const scansPostOperationSpec: msRest.OperationSpec = {
    httpMethod: 'POST',
    path: 'scans',
    queryParameters: [Parameters.apiVersion],
    requestBody: {
        parameterPath: ['options', 'body'],
        mapper: {
            serializedName: 'body',
            type: {
                name: 'Sequence',
                element: {
                    type: {
                        name: 'Composite',
                        className: 'ScanRunRequest',
                    },
                },
            },
        },
    },
    responses: {
        202: {
            bodyMapper: {
                serializedName: 'parsedResponse',
                type: {
                    name: 'Sequence',
                    element: {
                        type: {
                            name: 'Composite',
                            className: 'ScanRunResponse',
                        },
                    },
                },
            },
        },
        default: {},
    },
    serializer,
};

const scansByScanidGetOperationSpec: msRest.OperationSpec = {
    httpMethod: 'GET',
    path: 'scans/{scanid}',
    urlParameters: [Parameters.scanid],
    queryParameters: [Parameters.apiVersion],
    responses: {
        200: {
            bodyMapper: Mappers.ScanRunResultResponse,
        },
        400: {
            bodyMapper: Mappers.ScanRunErrorResponse,
        },
        default: {},
    },
    serializer,
};

const scansBatchPostOperationSpec: msRest.OperationSpec = {
    httpMethod: 'POST',
    path: 'scans/$batch',
    queryParameters: [Parameters.apiVersion],
    requestBody: {
        parameterPath: ['options', 'body'],
        mapper: {
            serializedName: 'body',
            type: {
                name: 'Sequence',
                element: {
                    type: {
                        name: 'Composite',
                        className: 'ScanBatchRequest',
                    },
                },
            },
        },
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: 'parsedResponse',
                type: {
                    name: 'Object',
                },
            },
        },
        default: {},
    },
    serializer,
};

const scansReportsByScanidAndReportidGetOperationSpec: msRest.OperationSpec = {
    httpMethod: 'GET',
    path: 'scans/{scanid}/reports/{reportid}',
    urlParameters: [Parameters.scanid, Parameters.reportid],
    queryParameters: [Parameters.apiVersion],
    responses: {
        200: {
            bodyMapper: Mappers.ScansReportsResponse,
        },
        default: {},
    },
    serializer,
};

export {
    AccessibilityInsightServiceScanAPI,
    AccessibilityInsightServiceScanAPIContext,
    Models as AccessibilityInsightServiceScanAPIModels,
    Mappers as AccessibilityInsightServiceScanAPIMappers,
};
